package com.nil.client;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.nil.nse.ExhOpenIntrestComparator;
import com.nil.nse.NSEOpenIntersert;

public class Client {

	public static void main(String[] args) {
		String filePath = "F:/NES/";// <<11012019>>/nseoi_<<11012019>>.xml";
		String folderNameList[] = getAllNSEFolders(filePath);

		Map<String, List<NSEOpenIntersert>> dateWiseOpenInterMap = new HashMap<String, List<NSEOpenIntersert>>();
		for (String folderName : folderNameList) {
			String nesOpenInterFile = filePath + File.separator + folderName + File.separator + "nseoi_" + folderName
					+ ".xml";
			if (new File(nesOpenInterFile).exists()) { // if file exist check
				dateWiseOpenInterMap.put(folderName, getNSEOpenIntersert(nesOpenInterFile));
			} else {
				continue;
			}
		}
		System.out.println(dateWiseOpenInterMap.size());

		for (Map.Entry<String, List<NSEOpenIntersert>> entry : dateWiseOpenInterMap.entrySet()) {
			System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());


		}
	}

	public  List<NSEOpenIntersert> getUniqueElement(List<NSEOpenIntersert> l1,List<NSEOpenIntersert> l2){
		
		
		
		return null;
	}
	
	public static String[] getAllNSEFolders(String filePath) {
		File file = new File(filePath);
		String[] directories = file.list(new FilenameFilter() {
			@Override
			public boolean accept(File current, String name) {
				return new File(current, name).isDirectory();
			}
		});
		return directories;
	}

	public static List<NSEOpenIntersert> getNSEOpenIntersert(String path) {
		File xmlFile = new File(path);
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		List<NSEOpenIntersert> nseList = null;
		List<NSEOpenIntersert> nseList1 = null;
		try {
			dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(xmlFile);
			doc.getDocumentElement().normalize();
			NodeList nodeList = doc.getElementsByTagName("MWPL");

			nseList = new ArrayList<NSEOpenIntersert>();
			nseList1 = new ArrayList<NSEOpenIntersert>();
			for (int i = 0; i < nodeList.getLength(); i++) {
				nseList.add(getNSEOpenIntersert(nodeList.item(i)));
			}
			Collections.sort(nseList, new ExhOpenIntrestComparator());

			int c = 0;
			for (NSEOpenIntersert nse : nseList) {
				nseList1.add(nse);

				c++;
				if (c == 10) {
					break;
				}
				// System.out.println(nse.toString());
			}
		} catch (SAXException | ParserConfigurationException | IOException e1) {
			e1.printStackTrace();
		}
		return nseList1;
	}

	private static NSEOpenIntersert getNSEOpenIntersert(Node node) {
		// XMLReaderDOM domReader = new XMLReaderDOM();
		NSEOpenIntersert nse = new NSEOpenIntersert();
		if (node.getNodeType() == Node.ELEMENT_NODE) {
			Element element = (Element) node;
			nse.setDate(getTagValue("Date", element));
			nse.setIsin(getTagValue("ISIN", element));
			nse.setScripName(getTagValue("Scrip_Name", element));
			nse.setNseSymbol(getTagValue("NSE_Symbol", element));
			nse.setMwlLimit(Double.parseDouble(getTagValue("MWPL_Limit", element)));
			nse.setOpenInterest(Double.parseDouble(getTagValue("Open_Interest", element)));
			nse.setExhOpenIntrest(nse.getOpenInterest() / nse.getMwlLimit() * 100);
		}
		return nse;
	}

	private static String getTagValue(String tag, Element element) {
		Node node;
		try {
			NodeList nodeList = element.getElementsByTagName(tag).item(0).getChildNodes();
			node = (Node) nodeList.item(0);
			if (node != null) {
				return node.getNodeValue();
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "";
	}
}